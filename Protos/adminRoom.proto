syntax = "proto3";

option csharp_namespace = "MyProtos";

package admin;

service AdminRoom {
  rpc MatchingQueueCount (MatchingQueueCountRequest) returns (MatchingQueueCountReply);
  rpc MatchingQueue (MatchingQueueRequest) returns (MatchingQueueReply);
  rpc MatchingUserCount (MatchingUserCountRequest) returns (MatchingUserCountReply);
  rpc MatchingUsers (MatchingUsersRequest) returns (MatchingUsersReply);
  rpc MatchingRoomCount (MatchingRoomCountRequest) returns (MatchingRoomCountReply);
  rpc MatchingRooms (MatchingRoomsRequest) returns (MatchingRoomsReply);
  rpc RoomCount (RoomCountRequest) returns (RoomCountReply);
  rpc Rooms (RoomsRequest) returns (RoomsReply);
}

// Note: MatchingQueue Info

message MatchingQueueCountRequest {
  string region = 1;
  int32 capacity = 2;
}

message MatchingQueueCountReply {
  int32 count = 1;
}

message MatchingQueue {
  string uid = 1;
  int64 enqueuedAt = 2;
}

message MatchingQueueRequest {
  string region = 1;
  int32 capacity = 2;
  int32 offset = 3;
  int32 count = 4;
}

message MatchingQueueReply {
  string region = 1;
  int32 capacity = 2;
  repeated MatchingQueue matchingQueues = 3;
}

// Note: MatchingUser Info

message MatchingUserCountRequest {
  string region = 1;
  int32 capacity = 2;
}

message MatchingUserCountReply {
  int32 count = 1;
}

message MatchingUser {
  string uid = 1;
  int64 enqueuedAt = 2;
}

message MatchingUsersRequest {
  string region = 1;
  int32 capacity = 2;
  int32 offset = 3;
  int32 count = 4;
}

message MatchingUsersReply {
  string region = 1;
  int32 capacity = 2;
  repeated MatchingUser matchingUsers = 3;
}

// Note: MatchingRoom Info

message MatchingRoomCountRequest {
  string region = 1;
  int32 capacity = 2;
}

message MatchingRoomCountReply {
  int32 count = 1;
}

message MatchingRoom {
  string uid = 1;
  string roomId = 2;
  int64 enqueuedAt = 3;
}

message MatchingRoomsRequest {
  string region = 1;
  int32 capacity = 2;
  int32 offset = 3;
  int32 count = 4;
}

message MatchingRoomsReply {
  string region = 1;
  int32 capacity = 2;
  repeated MatchingRoom matchingRooms = 3;
}

// Note: Room Info

message RoomCountRequest {
}

message RoomCountReply {
  int32 count = 1;
}

message Room {
  string roomId = 1;
  string region = 2;
  int32 capacity = 3;
  int32 mmr = 4;
  int64 createdAt = 5;
  repeated string uids = 6;
}

message RoomsRequest {
  int32 offset = 1;
  int32 count = 2;
}

message RoomsReply {
  repeated Room rooms = 1;
}
