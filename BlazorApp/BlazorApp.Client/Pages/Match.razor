@page "/match"
@using System.Net.Http.Headers
@using System.Text.Json
@using BlazorApp.Client.Extensions
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Match</PageTitle>

<h3>Match</h3>

@if (RoomId is null)
{
    <button @onclick="Matching">매칭 시작</button>
}
else
{
    <div>매칭 완료! 방 ID: @RoomId</div>
}

@code {
    private string? RoomId = null;
    private CancellationTokenSource cts = new();

    protected override async Task OnInitializedAsync()
    {
        await Http.AuthorizeAsync(JSRuntime);
        var roomIdRes = await Http.GetToAsync<RoomIdResponse>("api/match/room-id", cts.Token);
        if (!string.IsNullOrEmpty(roomIdRes?.RoomId))
        {
            NavigationManager.NavigateTo("/room");
            return;
        }
        var statusRes = await Http.GetToAsync<MatchingStatusResponse>("api/match/matching-status", cts.Token);
        if (statusRes?.isMatching is true)
        {
            if (statusRes.EnqueuedAt is long enqueuedAtUnix)
            {
                var stateJson = JsonSerializer.Serialize(new
                {
                    EnqueuedAt = enqueuedAtUnix
                });
                NavigationManager.NavigateTo("/wait-room", new NavigationOptions
                {
                    HistoryEntryState = stateJson
                });
                return;
            }
        }
    }

    async Task Matching()
    {
        var region = "kr";
        var capacity = 4;
        var mmr = 300;
        var matchingUri = $"api/match/matching?region={region}&capacity={capacity}&mmr={mmr}";
        var matchingRes = await Http.PostToAsync<MatchingResponse>(matchingUri, null, cts.Token);
        if (matchingRes?.Enqueued is true)
        {
            await OnInitializedAsync();
        }
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }

    class RoomIdResponse
    {
        public string? RoomId { get; set; }
    }

    class MatchingStatusResponse
    {
        public bool isMatching { get; set; }
        public long EnqueuedAt { get; set; }
    }

    class MatchingResponse
    {
        public bool Enqueued { get; set; }
    }
}