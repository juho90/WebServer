@page "/match"
@using System.Net.Http.Headers
@using System.Text.Json
@using BlazorApp.Client.Extensions
@using Grpc.Core
@using MyProtos
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject RoomMatcher.RoomMatcherClient GrpcClient

<PageTitle>Match</PageTitle>

<h3>Match</h3>

@if (RoomId is null)
{
    <button @onclick="Matching">매칭 시작</button>
}
else
{
    <div>매칭 완료! 방 ID: @RoomId</div>
}

@code {
    private string? RoomId = null;
    private CancellationTokenSource cts = new();

    protected override async Task OnInitializedAsync()
    {
        var accessToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "accessToken");
        var headers = new Metadata
        {
            { "Authorization", $"Bearer {accessToken}" }
        };
        var roomIdReply = await GrpcClient.RoomIdAsync(new RoomIdRequest {}, headers);
        if (!string.IsNullOrEmpty(roomIdReply?.RoomId))
        {
            NavigationManager.NavigateTo("/room");
            return;
        }
        var statusReply = await GrpcClient.MatchingStatusAsync(new MatchingStatusRequest {}, headers);
        if (statusReply?.IsMatched is true)
        {
            if (statusReply.EnqueuedAt is long enqueuedAtUnix)
            {
                var stateJson = JsonSerializer.Serialize(new
                {
                    EnqueuedAt = enqueuedAtUnix
                });
                NavigationManager.NavigateTo("/wait-room", new NavigationOptions
                {
                    HistoryEntryState = stateJson
                });
                return;
            }
        }
    }

    async Task Matching()
    {
        var accessToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "accessToken");
        var headers = new Metadata
        {
            { "Authorization", $"Bearer {accessToken}" }
        };
        var matchingReply = await GrpcClient.MatchingAsync(new MatchingRequest
        {
            Region = "kr",
            Capacity = 4,
            Mmr = 300
        }, headers);
        if (matchingReply?.Enqueued is true)
        {
            await OnInitializedAsync();
        }
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}