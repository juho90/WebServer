@page "/admin/room-info"
@using BlazorApp.Client.Components
@using BlazorApp.Client.Extensions
@using Grpc.Core
@using MyProtos
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject AdminRoom.AdminRoomClient GrpcClient

<h3>MatchingQueue Info</h3>

@if(string.IsNullOrEmpty(accessToken))
{
    <div>
        Loading ...
    </div>
}
else
{
    <div>
        <table>
            <thead>
                <tr>
                    <th>UID</th>
                    <th>EnqueuedAt</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var matchingQueue in matchingQueueReply?.MatchingQueues ?? [])
                {
                    <tr>
                        <td>@matchingQueue.Uid</td>
                        <td>@matchingQueue.EnqueuedAt.ToElapsedSeconds().FormatElapsed()</td>
                    </tr>
                }
            </tbody>
        </table>
        <Pagination Current="matchingQueuePage"
                    Total="matchingQueuePages"
                    OnChanged="LoadMatchingQueueAsync" />
    </div>
}

<h3>MatchingUser Info</h3>

@if (string.IsNullOrEmpty(accessToken))
{
    <div>
        Loading ...
    </div>
}
else
{
    <div>
        <table>
            <thead>
                <tr>
                    <th>UID</th>
                    <th>EnqueuedAt</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var matchingUser in matchingUserReply?.MatchingUsers ?? [])
                {
                    <tr>
                        <td>@matchingUser.Uid</td>
                        <td>@matchingUser.EnqueuedAt.ToElapsedSeconds().FormatElapsed()</td>
                    </tr>
                }
            </tbody>
        </table>
        <Pagination Current="matchingUserPage"
                    Total="matchingUserPages"
                    OnChanged="LoadMatchingUserAsync" />
    </div>
}

<h3>MatchingRoom Info</h3>

@if (string.IsNullOrEmpty(accessToken))
{
    <div>
        Loading ...
    </div>
}
else
{
    <div>
        <table>
            <thead>
                <tr>
                    <th>UID</th>
                    <th>RoomId</th>
                    <th>EnqueuedAt</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var matchingRoom in matchingRoomReply?.MatchingRooms ?? [])
                {
                    <tr>
                        <td>@matchingRoom.Uid</td>
                        <td>@matchingRoom.RoomId</td>
                        <td>@matchingRoom.EnqueuedAt.ToElapsedSeconds().FormatElapsed()</td>
                    </tr>
                }
            </tbody>
        </table>
        <Pagination Current="matchingRoomPage"
                    Total="matchingRoomPages"
                    OnChanged="LoadMatchingRoomAsync" />
    </div>
}

<h3>Room Info</h3>

@if (string.IsNullOrEmpty(accessToken))
{
    <div>
        Loading ...
    </div>
}
else
{
    <div>
        <table>
            <thead>
                <tr>
                    <th>RoomId</th>
                    <th>Region</th>
                    <th>Capacity</th>
                    <th>MMR</th>
                    <th>Players</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var room in roomsReply?.Rooms ?? [])
                {
                    <tr>
                        <td>@room.RoomId</td>
                        <td>@room.Region</td>
                        <td>@room.Capacity</td>
                        <td>@room.Mmr</td>
                        <td>@string.Join("\n", room.Uids)</td>
                    </tr>
                }
            </tbody>
        </table>
        <Pagination Current="roomsPage"
                    Total="roomsPages"
                    OnChanged="LoadRoomInfoAsync" />
    </div>
}

<div>
    <button @onclick="RefreshAsync">새로고침</button>
</div>

@code {
    private const int PageSize = 20;

    private string? accessToken = null;
    private MatchingQueueReply? matchingQueueReply = null;
    private int matchingQueueCount = 0;
    private int matchingQueuePage = 1;
    private int matchingQueuePages = 0;
    private MatchingUsersReply? matchingUserReply = null;
    private int matchingUserCount = 0;
    private int matchingUserPage = 1;
    private int matchingUserPages = 0;
    private MatchingRoomsReply? matchingRoomReply = null;
    private int matchingRoomCount = 0;
    private int matchingRoomPage = 1;
    private int matchingRoomPages = 0;
    private RoomsReply? roomsReply = null;
    private int roomCount = 0;
    private int roomsPage = 1;
    private int roomsPages = 0;
    private CancellationTokenSource cts = new();

    protected override async Task OnInitializedAsync()
    {
        var loginRes = await Http.PostToAsync<LoginResponse>("/api/auth/test-login", new { uid = "Admin" }, cts.Token);
        if (loginRes != null)
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "accessToken", loginRes.AccessToken);
            accessToken = loginRes.AccessToken;
        }
    }

    private async Task RefreshAsync()
    {
        await LoadMatchingQueueAsync(matchingQueuePage);
        await LoadMatchingUserAsync(matchingUserPage);
        await LoadMatchingRoomAsync(matchingRoomPage);
        await LoadRoomInfoAsync(roomsPage);
    }

    private async Task LoadMatchingQueueAsync(int page)
    {
        var headers = new Metadata
        {
            { "Authorization", $"Bearer {accessToken}" }
        };
        var matchingQueueCountReply = await GrpcClient.MatchingQueueCountAsync(new MatchingQueueCountRequest
        {
            Region = "kr",
            Capacity = 4
        }, headers);
        matchingQueueCount = matchingQueueCountReply.Count;
        matchingQueueReply = await GrpcClient.MatchingQueueAsync(new MatchingQueueRequest
        {
            Region = "kr",
            Capacity = 4,
            Offset = (page - 1) * PageSize,
            Count = PageSize
        }, headers);
        matchingQueuePage = page;
        matchingQueuePages = (matchingQueueCount + PageSize - 1) / PageSize;
    }

    private async Task LoadMatchingUserAsync(int page)
    {
        var headers = new Metadata
        {
            { "Authorization", $"Bearer {accessToken}" }
        };
        var matchingUserCountReply = await GrpcClient.MatchingUserCountAsync(new MatchingUserCountRequest
        {
            Region = "kr",
            Capacity = 4
        }, headers);
        matchingUserCount = matchingUserCountReply.Count;
        matchingUserReply = await GrpcClient.MatchingUsersAsync(new MatchingUsersRequest
        {
            Region = "kr",
            Capacity = 4,
            Offset = (page - 1) * PageSize,
            Count = PageSize
        }, headers);
        matchingUserPage = page;
        matchingUserPages = (matchingUserCount + PageSize - 1) / PageSize;
    }


    private async Task LoadMatchingRoomAsync(int page)
    {
        var headers = new Metadata
        {
            { "Authorization", $"Bearer {accessToken}" }
        };
        var matchingRoomCountReply = await GrpcClient.MatchingRoomCountAsync(new MatchingRoomCountRequest
        {
            Region = "kr",
            Capacity = 4
        }, headers);
        matchingRoomCount = matchingRoomCountReply.Count;
        matchingRoomReply = await GrpcClient.MatchingRoomsAsync(new MatchingRoomsRequest
        {
            Region = "kr",
            Capacity = 4,
            Offset = (page - 1) * PageSize,
            Count = PageSize
        }, headers);
        matchingRoomPage = page;
        matchingRoomPages = (matchingRoomCount + PageSize - 1) / PageSize;
    }

    private async Task LoadRoomInfoAsync(int page)
    {
        var headers = new Metadata
        {
            { "Authorization", $"Bearer {accessToken}" }
        };
        var roomInfoCountReply = await GrpcClient.RoomCountAsync(new RoomCountRequest(), headers);
        roomCount = roomInfoCountReply.Count;
        roomsReply = await GrpcClient.RoomsAsync(new RoomsRequest
        {
            Offset = (page - 1) * PageSize,
            Count = PageSize
        }, headers);
        roomsPage = page;
        roomsPages = (roomCount + PageSize - 1) / PageSize;
    }

    class LoginResponse
    {
        public string? AccessToken { get; set; }
    }
}
