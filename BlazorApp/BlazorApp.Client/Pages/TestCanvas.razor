@page "/test-canvas"
@using BlazorApp.Client.Services
@using Flatbuffers
@inject CanvasService CanvasService
@inject FlatbufferClient FlatbufferClient

<PageTitle>TestCanvas</PageTitle>

<canvas id="myCanvas" width="400" height="400" style="border:1px solid #ccc;" />

@code {
    private PeriodicTimer? timer;
    private CancellationTokenSource cts = new();

    private List<Ball> balls = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        await CanvasService.InitializeAsync("myCanvas");
        _ = Task.Run(async () =>
        {
            while (!cts.Token.IsCancellationRequested)
            {
                try
                {
                    await InvokeAsync(OnFlatbufferAsync);
                    await InvokeAsync(StateHasChanged);
                }
                catch (OperationCanceledException)
                {
                    break;
                }
            }
        });
        timer = new PeriodicTimer(TimeSpan.FromMilliseconds(60));
        _ = Task.Run(async () =>
        {
            while (await timer.WaitForNextTickAsync(cts.Token))
            {
                await InvokeAsync(OnTimerAsync);
                await InvokeAsync(StateHasChanged);
            }
        });
    }

    protected async Task OnFlatbufferAsync()
    {
        var data = await FlatbufferClient.ReceiveAsync(cts.Token);
        var cellverseId = CellverseUtil.GetCellverseId(data);
        switch (cellverseId)
        {
            case CellverseId.CellSpawn:
                var cellSpawn = CellverseUtil.DeserializeCellSpawn(data);
                balls.Add(new()
                {
                    Id = cellSpawn.Id,
                    X = cellSpawn.X,
                    Y = cellSpawn.Y,
                    Size = cellSpawn.Size
                });
                break;
            default:
                break;
        }
    }

    private async Task OnTimerAsync()
    {
        await CanvasService.ClearAsync();
        foreach(var ball in balls)
        {
            await CanvasService.DrawCircleAsync(ball.X, ball.Y, ball.Size, ball.Color ?? "black");
        }
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
        timer?.Dispose();
    }

    class Ball
    {
        public int Id { get; set; }
        public float X { get; set; }
        public float Y { get; set; }
        public float Size { get; set; }
        public string? Color { get; set; }
    }
}
