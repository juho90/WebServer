@page "/wait-room"
@using BlazorApp.Client.Services
@using Flatbuffers
@using System.Text.Json
@using Grpc.Core
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using MyProtos
@inject IJSRuntime JSRuntime
@inject IWebAssemblyHostEnvironment HostEnvironment
@inject NavigationManager NavigationManager
@inject FlatbufferClient FlatbufferClient
@inject RoomMatcher.RoomMatcherClient GrpcClient

<PageTitle>Wait...</PageTitle>

<h3>WaitRoom</h3>
@if (HostEnvironment.Environment == "Development")
{
    <p>@roomId</p>
}
<p>대기 시간: @FormatElapsed(elapsedSeconds)</p>

@code {
    private PeriodicTimer? timer;
    private string? roomId = string.Empty;
    private long enqueuedAt = 0;
    private int elapsedSeconds = 0;
    private CancellationTokenSource cts = new();

    private string FormatElapsed(int seconds)
    {
        int min = seconds / 60;
        int sec = seconds % 60;
        return $"{min:D2}분 {sec:D2}초";
    }

    protected override async Task OnInitializedAsync()
    {
        await FlatbufferClient.ConnectAsync("ws://localhost:25050/ws");
        await FlatbufferClient.SendAuthenticationAsync();
        _ = Task.Run(async () =>
        {
            while (!cts.Token.IsCancellationRequested)
            {
                try
                {
                    var data = await FlatbufferClient.ReceiveAsync(cts.Token);
                    var flatbufferId = FlatBufferUtil.GetFlatbufferId(data);
                    switch(flatbufferId)
                    {
                        case FlatBufferId.RoomCreate:
                            var roomCreate = FlatBufferUtil.DeserializeRoomCreate(data);
                            roomId = roomCreate.RoomId;
                            break;
                        default:
                            break;
                    };
                    _ = InvokeAsync(StateHasChanged);
                }
                catch (OperationCanceledException)
                {
                    break;
                }
            }
        });
        var stateJson = NavigationManager.HistoryEntryState;
        if (!string.IsNullOrEmpty(stateJson))
        {
            var stateModel = JsonSerializer.Deserialize<StateModel>(stateJson);
            enqueuedAt = stateModel?.EnqueuedAt ?? 0;
        }
        timer = new PeriodicTimer(TimeSpan.FromSeconds(1));
        _ = Task.Run(async () =>
        {
            while (await timer.WaitForNextTickAsync(cts.Token))
            {
                var milliseconds = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
                elapsedSeconds = (int)((milliseconds - enqueuedAt) / 1000);
                await InvokeAsync(OnTimerAsync);
            }
        });
        var milliseconds = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
        elapsedSeconds = (int)((milliseconds - enqueuedAt) / 1000);
    }

    protected async Task OnTimerAsync()
    {
        var accessToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "accessToken");
        var headers = new Metadata
        {
            { "Authorization", $"Bearer {accessToken}" }
        };
        var roomIdReply = await GrpcClient.RoomIdAsync(new RoomIdRequest { }, headers);
        roomId = roomIdReply?.RoomId;
        if(string.IsNullOrEmpty(roomId))
        {
            return;
        }
        NavigationManager.NavigateTo("/room");
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
        timer?.Dispose();
    }

    private class StateModel
    {
        public long EnqueuedAt { get; set; }
    }
}