@page "/test-login"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory ClientFactory

<h3>TestLogin</h3>

<div>
    <label for="uid">UID:</label>
    <input id="uid" @bind="UID" />
    <button @onclick="LoginAsync">Login</button>
</div>

@if (!string.IsNullOrEmpty(Result))
{
    <p>@Result</p>
}

@code {
    private HttpClient Http => ClientFactory.CreateClient("ApiClient");
    private string UID = string.Empty;
    private string Result = string.Empty;

    private async Task LoginAsync()
    {
        if (string.IsNullOrWhiteSpace(UID))
        {
            Result = "UID is required.";
            return;
        }
        try
        {
            var response = await Http.PostAsJsonAsync("/api/auth/test-login", new { uid = UID });
            var json = await response.Content.ReadFromJsonAsync<LoginResponse>();
            var accessToken = json?.AccessToken;
            if (!string.IsNullOrEmpty(accessToken))
            {
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "accessToken", accessToken);
            }
            if (response.IsSuccessStatusCode)
            {
                Result = "Login successful!";
            }
            else
            {
                Result = "Login failed.";
            }
        }
        catch (Exception ex)
        {
            Result = $"Error: {ex.Message}";
        }
        NavigationManager.NavigateTo("/match");
    }

    class LoginResponse
    {
        public string? AccessToken { get; set; }
    }
}
