@page "/test-login"
@using BlazorApp.Client.Extensions
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Login</PageTitle>

<h3>TestLogin</h3>

<div>
    <label for="uid">UID:</label>
    <input id="uid" @bind="UID" />
    <button @onclick="LoginAsync">Login</button>
</div>

@if (!string.IsNullOrEmpty(Result))
{
    <p>@Result</p>
}

@code {
    private string UID = string.Empty;
    private string Result = string.Empty;
    private CancellationTokenSource cts = new();

    private async Task LoginAsync()
    {
        if (string.IsNullOrWhiteSpace(UID))
        {
            Result = "UID is required.";
            return;
        }
        try
        {
            var loginRes = await Http.PostToAsync<LoginResponse>("/api/auth/test-login", new { uid = UID }, cts.Token);
            if (loginRes != null)
            {
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "accessToken", loginRes.AccessToken);
            }
            Result = "Login successful!";
            NavigationManager.NavigateTo("/match");
        }
        catch (Exception ex)
        {
            Result = $"Error: {ex.Message}";
        }
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }

    class LoginResponse
    {
        public string? AccessToken { get; set; }
    }
}
